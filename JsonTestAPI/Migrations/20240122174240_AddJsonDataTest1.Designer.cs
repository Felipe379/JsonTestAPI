// <auto-generated />
using System;
using JsonTestAPI.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JsonTestAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240122174240_AddJsonDataTest1")]
    partial class AddJsonDataTest1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JsonTestAPI.Core.Entities.JsonDataTest1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DataEnumProperty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataProperty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeFillerProperty1")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("DateTimeOffsetFillerProperty1")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FillerDataProperty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FillerEnum1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntFillerProperty")
                        .HasColumnType("int");

                    b.Property<string>("StringFillerProperty1")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JsonDataTest1");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataEnumProperty = "[\"FillerEnum1\",\"FillerEnum2\",\"FillerEnum3\"]",
                            DataProperty = "[\"Data1_1\",\"Data2_1\",\"Data3_1\",\"Data4_1\",\"Data5_1\",\"Data6_1\",\"Data7_1\",\"Data8_1\",\"Data9_1\",\"Data10_1\"]",
                            DateTimeFillerProperty1 = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTimeOffsetFillerProperty1 = new DateTimeOffset(new DateTime(2024, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -3, 0, 0, 0)),
                            FillerDataProperty = "[\"FillerData1_1\",\"FillerData2_1\",\"FillerData3_1\",\"FillerData4_1\",\"FillerData5_1\",\"FillerData6_1\",\"FillerData7_1\",\"FillerData8_1\",\"FillerData9_1\",\"FillerData10_1\"]",
                            FillerEnum1 = "FillerEnum1",
                            IntFillerProperty = 10,
                            StringFillerProperty1 = "Filler1"
                        },
                        new
                        {
                            Id = 2,
                            DataEnumProperty = "[\"FillerEnum1\",\"FillerEnum2\",\"FillerEnum3\"]",
                            DataProperty = "[\"Data1_2\",\"Data2_2\",\"Data3_2\",\"Data4_2\",\"Data5_2\",\"Data6_2\",\"Data7_2\",\"Data8_2\",\"Data9_2\",\"Data10_2\"]",
                            DateTimeFillerProperty1 = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTimeOffsetFillerProperty1 = new DateTimeOffset(new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -3, 0, 0, 0)),
                            FillerDataProperty = "[\"FillerData1_2\",\"FillerData2_2\",\"FillerData3_2\",\"FillerData4_2\",\"FillerData5_2\",\"FillerData6_2\",\"FillerData7_2\",\"FillerData8_2\",\"FillerData9_2\",\"FillerData10_2\"]",
                            FillerEnum1 = "FillerEnum2",
                            IntFillerProperty = 20,
                            StringFillerProperty1 = "Filler2"
                        },
                        new
                        {
                            Id = 3,
                            DataEnumProperty = "[\"FillerEnum1\",\"FillerEnum2\",\"FillerEnum3\"]",
                            DataProperty = "[\"Data1_3\",\"Data2_3\",\"Data3_3\",\"Data4_3\",\"Data5_3\",\"Data6_3\",\"Data7_3\",\"Data8_3\",\"Data9_3\",\"Data10_3\"]",
                            DateTimeFillerProperty1 = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTimeOffsetFillerProperty1 = new DateTimeOffset(new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -3, 0, 0, 0)),
                            FillerDataProperty = "[\"FillerData1_3\",\"FillerData2_3\",\"FillerData3_3\",\"FillerData4_3\",\"FillerData5_3\",\"FillerData6_3\",\"FillerData7_3\",\"FillerData8_3\",\"FillerData9_3\",\"FillerData10_3\"]",
                            FillerEnum1 = "FillerEnum3",
                            IntFillerProperty = 30,
                            StringFillerProperty1 = "Filler3"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
